package com.yuwan.advertising.utils;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import okhttp3.*;
import okio.BufferedSource;
import org.apache.commons.collections.MapUtils;
import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.client.config.CookieSpecs;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

@Slf4j
public class HttpUtil {

    private final static OkHttpClient okHttpClient = new OkHttpClient.Builder()
            .connectionPool(new ConnectionPool(80, 20, TimeUnit.MINUTES)).readTimeout(20, TimeUnit.SECONDS)
            .writeTimeout(20, TimeUnit.SECONDS).connectTimeout(20, TimeUnit.SECONDS).build();

    public static String httpGet(String url, Map<String, String> headMap, Map<String, Object> params) {
        Request.Builder builder = new Request.Builder();
        Optional.ofNullable(headMap).ifPresent(map -> map.forEach(builder::addHeader));

        if (MapUtils.isNotEmpty(params)) {
            String join = params.entrySet().stream().map(item -> item.getKey() + "=" + item.getValue())
                    .collect(Collectors.joining("&"));
            url = String.join("?", url, join);
        }
        Call call = okHttpClient.newCall(builder.url(url).build());
        Response response;
        try {
            response = call.execute();
            return response.body().string();
        } catch (IOException e) {
            log.error("发送 get 请求出现异常！", e);
            e.printStackTrace();
        }
        return "";
    }

    /**
     * ok httpclient 异步Get请求
     *
     * @param url
     * @param headMap
     * @param params
     */
    private static final ObjectMapper mapper = new ObjectMapper();

    public static void httpAsyncGet(String url, Map<String, String> headMap, Map<String, Object> params,
                                    Callback callback) {

        Request.Builder builder = new Request.Builder();

        Optional.ofNullable(headMap).ifPresent(map -> map.forEach(builder::addHeader));

//        if (MapUtils.isNotEmpty(params)) {
//            String join = params.entrySet().stream().map(item -> item.getKey() + "=" + item.getValue())
//                    .collect(Collectors.joining("&"));
//            url = String.join("?", url, join);
//        }

        try {
            URIBuilder ub = new URIBuilder(url);
            params.forEach((k, v) -> {
                try {
                    ub.addParameter(k, v instanceof String ? (String) v : mapper.writeValueAsString(v));
                } catch (JsonProcessingException e) {
                    e.printStackTrace();
                }
            });
            Call call = okHttpClient.newCall(builder.url(ub.build().toURL()).build());
            call.enqueue(callback);
        } catch(Exception ex) {
            log.error("okhttp request faile.", ex);
        }
    }

    public static void httpSynccGet(String url, Map<String, String> headMap, Map<String, Object> params,
                                    Callback callback) {

        Request.Builder builder = new Request.Builder();

        Optional.ofNullable(headMap).ifPresent(map -> map.forEach(builder::addHeader));
        try {
            URIBuilder ub = new URIBuilder(url);
            params.forEach((k, v) -> {
                try {
                    ub.addParameter(k, v instanceof String ? (String) v : mapper.writeValueAsString(v));
                } catch (JsonProcessingException e) {
                    e.printStackTrace();
                }
            });
            Call call = okHttpClient.newCall(builder.url(ub.build().toURL()).build());
            callback.onResponse(call, call.execute());
        } catch(Exception ex) {
            log.error("okhttp request faile.", ex);
        }
    }

    public static byte[] httpGetBytes(String url) {
        byte[] bytes = null;
        Request request = new Request.Builder().url(url).build();
        Call call = okHttpClient.newCall(request);
        try {
            bytes = call.execute().body().bytes();
        } catch (Exception e) {
            log.error("http get bytes error", e);
        }
        return bytes;
    }

    public static String post(String url, String params) {
        return post(url, null, params);
    }

    /*** post json ***/
    public static String post(String url, Map<String, String> headMap, String params) {
        String response = null;
        MediaType mediaType = MediaType.parse("application/json; charset=utf-8");
        RequestBody body = RequestBody.create(mediaType, params);
        Request.Builder builder = new Request.Builder().url(url).post(body);
        if (headMap != null) headMap.forEach(builder::addHeader);
        Call call = okHttpClient.newCall(builder.build());
        try {
            response = call.execute().body().string();
        } catch (IOException e) {
            log.error("send post error", e);
        }
        return response;
    }

    public static String sendPost(String url, Map<String, String> param) {
        String resp = "";
        try {
            RequestConfig globalConfig = RequestConfig.custom().setCookieSpec(CookieSpecs.IGNORE_COOKIES).build();
            CloseableHttpClient httpClient = HttpClients.custom().setDefaultRequestConfig(globalConfig).build();

//            CloseableHttpClient httpClient = HttpClients.createDefault();
            HttpPost httpPost = new HttpPost(url);
            List<NameValuePair> list = new ArrayList<>();
            for (Map.Entry<String, String> item : param.entrySet()) {
                list.add(new BasicNameValuePair(item.getKey(), item.getValue()));
            }
            httpPost.setEntity(new UrlEncodedFormEntity(list, "utf-8"));
            log.info("request param#{}", list.toString());

            CloseableHttpResponse response = httpClient.execute(httpPost);

            HttpEntity entity = response.getEntity();
            if (entity != null) {
                resp = EntityUtils.toString(entity, "utf-8");
                log.info("response#{}", resp);
            }
            EntityUtils.consume(entity);
        } catch (Exception e) {
            log.error("send post error", e);
        }
        return resp;
    }

    public static String post(String url, Map<String, String> headerMap, Map<String, Object> params) {
        return post(url, headerMap, params, null);
    }

    /*** post Content-Type:multipart/form-data 上传文件及表单数据 ***/
    public static String post(String url, Map<String, String> headerMap, Map<String, Object> params, byte[] bytes) {
        MultipartBody.Builder builder = new MultipartBody.Builder().setType(MultipartBody.FORM);
        // 添加表单数据
        for (Map.Entry<String, Object> item : params.entrySet()) {
            if (item.getValue() instanceof MultipartFile) {
                MultipartFile file = (MultipartFile) item.getValue();
                try {
                    builder.addFormDataPart(item.getKey(), file.getOriginalFilename(), RequestBody.create(MediaType.parse("application/octet-stream"), file.getBytes()));
                } catch (IOException e) {
                    e.printStackTrace();
                }
            } else {
                builder.addFormDataPart(item.getKey(), String.valueOf(item.getValue()));
            }
        }
        Optional.ofNullable(bytes).ifPresent(it -> builder.addFormDataPart("file", "file.jpg", RequestBody.create(MediaType.parse("application/octet-stream"), it)));

        RequestBody multipartBody = builder.build();
        Request.Builder requestBuilder = new Request.Builder().url(url).header("Content-Type", "multipart/form-data").post(multipartBody);
        if (headerMap != null) headerMap.forEach(requestBuilder::addHeader);

        String result = "";
        try {
            Response response = okHttpClient.newCall(requestBuilder.build()).execute();
            result = response.body().string();
        } catch (Exception e) {
            log.error("send post error", e);
        }
        return result;
    }

    /*** post Content-Type:multipart/form-data 上传文件及表单数据 ***/
    public static String post(String url, Map<String, Object> params, List<MultipartFile> files) {
        String result = "";
        MediaType mediaType = MediaType.parse("multipart/form-data; charset=utf-8");
        MultipartBody.Builder builder = new MultipartBody.Builder().setType(MultipartBody.FORM);
        try {
            if (params != null) params.forEach((k, v) -> builder.addFormDataPart(k, String.valueOf(v)));
            if (files != null) {
                for (MultipartFile file : files) {
                    builder.addFormDataPart("file", file.getOriginalFilename(), RequestBody.create(mediaType, file.getBytes()));
                }
            }
            Request request = new Request.Builder().url(url).post(builder.build()).build();
            Response response = okHttpClient.newCall(request).execute();
            result = response.body().string();
        } catch (Exception e) {
            log.error("send post error", e);
        }
        return result;
    }

    public static Reader download(String url, String params) {
        Reader reader = null;
        MediaType mediaType = MediaType.parse("application/json; charset=utf-8");
        RequestBody body = RequestBody.create(mediaType, params);
        Request.Builder builder = new Request.Builder().url(url).post(body);
        Call call = okHttpClient.newCall(builder.build());
        try {
            BufferedSource source = call.execute().body().source();
            reader = new InputStreamReader(source.inputStream(), "GB2312");
        } catch (IOException e) {
            log.error("send post error", e);
        }
        return reader;
    }

    public static Reader download(String url, Map<String, String> headMap) {
        Reader reader = null;
        Request.Builder builder = new Request.Builder().url(url).get();
        Optional.ofNullable(headMap).ifPresent(map -> map.forEach(builder::addHeader));
        Call call = okHttpClient.newCall(builder.build());
        try {
            BufferedSource source = call.execute().body().source();
            reader = new InputStreamReader(source.inputStream());
        } catch (IOException e) {
            log.error("send get error", e);
        }
        return reader;
    }

    public static boolean setDowloadHttpServletHeader(HttpServletResponse response, String fileName) {
        response.setHeader("content-type", "application/octet-stream");
        response.setContentType("application/octet-stream");
        try {
            response.setHeader("Content-Disposition", "attachment;filename=" + URLEncoder.encode(fileName, "UTF-8"));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }


}
